#!/usr/bin/env python
'''
xgps2 -- test client for gpsd

usage: xgps2 [-DhlV?] [server[:port[:device]]]

'''

gui_about = '''\
This is xgps2, a test client for the gpsd daemon.

By Eric S. Raymond for the GPSD project, December 2009
'''

import sys, os, re, math, time, exceptions, getopt

import gobject, pygtk
pygtk.require('2.0')
import gtk

import gps

class Base:
    gpsfields = (
        # First column
        ("Time", "time"),
        ("Latitude", "lat"),
        ("Longitude", "lon"),
        ("Altitude", "alt"),
        ("Speed", "speed"),
        ("Climb", "climb"),
        ("Track", "track"),
        # Second column
        ("Status", "mode"),
        ("EPX", "epx"),
        ("EPY", "epy"),
        ("EPV", "epv"),
        ("EPS", "eps"),
        ("EPC", "epc"),
        ("EPD", "epd"),
        )
    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("xgps2")
        self.window.connect("delete_event", self.delete_event)
        #self.window.set_size_request(800, 600)

        vbox = gtk.VBox(False, 0)
        self.window.add(vbox)
        vbox.show()

        self.window.connect("destroy", lambda w: gtk.main_quit())

        #self.tooltips = gtk.Tooltips()

        # Set up toolbar style
        toolbar = gtk.Toolbar()
        toolbar.set_orientation(gtk.ORIENTATION_HORIZONTAL)
        toolbar.set_style(gtk.TOOLBAR_BOTH)
        toolbar.set_border_width(1)
        vbox.pack_start(toolbar, expand = False)
        toolbar.show()

        quit = gtk.ToolButton(gtk.STOCK_QUIT)
        toolbar.insert(quit, -1)
        quit.set_tooltip_text("Leave this program.")
        quit.connect("clicked", lambda w: gtk.main_quit())
        quit.show()

        properties = gtk.ToolButton(gtk.STOCK_PROPERTIES)
        toolbar.insert(properties, -1)
        properties.set_tooltip_text("Preferences.")
        #properties.connect("clicked", self.properties_handler)
        properties.show()

        hbox = gtk.HBox(False, 0)
        vbox.add(hbox)
        hbox.show()

        skyframe = gtk.Frame(label="Satellite List")
        skyframe.show()
        hbox.add(skyframe)

        self.satlist = gtk.ListStore(str,str,str,str,str)
        view = gtk.TreeView(model=self.satlist)

        for (i, label) in enumerate(('PRN:','Elev:','Azim:','SNR:','Used:')):
            column = gtk.TreeViewColumn(label)
            renderer = gtk.CellRendererText()
            column.pack_start(renderer)
            column.add_attribute(renderer, 'text', i)
            view.append_column(column)

        self.row_iters = []
        for i in range(gps.MAXCHANNELS):
            self.satlist.append(["", "", "", "", ""])
            self.row_iters.append(self.satlist.get_iter(i))

        view.show()
        skyframe.add(view)

        viewframe = gtk.Frame(label="Skyview")
        viewframe.show()
        hbox.add(viewframe)
        self.skyview = gtk.DrawingArea()
        self.skyview.set_size_request(400, 400)
        self.skyview.show()
        viewframe.add(self.skyview)

        self.rawdisplay = gtk.Entry()
        self.rawdisplay.set_editable(False)
        self.rawdisplay.show()
        vbox.add(self.rawdisplay)

        dataframe = gtk.Frame(label="GPS data")
        data_hbox = gtk.HBox()
        dataframe.add(data_hbox)
        datacolumns = (gtk.VBox(), gtk.VBox())
        map(lambda w: data_hbox.add(w), datacolumns)
        gpswidgets = []
        for i in range(len(Base.gpsfields)):
            new_hbox = gtk.HBox()
            if i < len(Base.gpsfields) / len(datacolumns):
                datacolumns[0].add(new_hbox)
            else:
                datacolumns[1].add(new_hbox)
            new_hbox.add(gtk.Label(Base.gpsfields[i][0]))
            new_widget = gtk.Entry()
            new_hbox.add(new_widget)
            gpswidgets.append(new_widget)
        dataframe.show_all()
        vbox.add(dataframe)

        self.window.show()

    def set_satlist_field(self, row, column, value):
        "Set a specified field in the satellite list."
        self.satlist.set_value(self.row_iters[row], column, value)

    def delete_event(self, widget, event, data=None):
        gtk.main_quit()
        return False

    # State updates

    def update_skyview(self, satellites):
        "Update the satellite list and skyview."
        for (i, satellite) in enumerate(satellites): 
            self.set_satlist_field(i, 0, satellite.PRN)
            self.set_satlist_field(i, 1, satellite.elevation)
            self.set_satlist_field(i, 2, satellite.azimuth)
            self.set_satlist_field(i, 3, satellite.ss)
            yesno = 'N'
            if satellite.used:
                yesno = 'Y'
            self.set_satlist_field(i, 4, yesno)
        for i in range(len(satellites), gps.MAXCHANNELS):
            for j in range(0, 5):
                self.set_satlist_field(i, j, "")

    # I/O monitoring and gtk housekeeping

    def watch(self, daemon):
        "Set up monitoring of a daemon instance."
        self.daemon = daemon
        gobject.io_add_watch(daemon.sock, gobject.IO_IN, self.handle_response)
        gobject.io_add_watch(daemon.sock, gobject.IO_ERR, self.handle_error)
        gobject.io_add_watch(daemon.sock, gobject.IO_HUP, self.handle_hangup)

    def handle_response(self, source, condition):
        "Handle ordinary I/O ready condition from the daemon."
        self.daemon.poll()
        if self.daemon.valid & gps.PACKET_SET:
            self.rawdisplay.set_text(self.daemon.response.strip())
            if self.daemon.data["class"] == "SKY":
                self.update_skyview(self.daemon.satellites)
            #elif self.daemon.data["class"] == "TPV":
            #    self.update_gpsdata(self.daemon.satellites)
        return True

    def handle_error(self, source, condition):
        "Handle error condition from the daemon."
        # FIXME: Pop up a notification...
        return True

    def handle_hangup(self, source, condition):
        "Handle hangup condition from the daemon."
        # FIXME: Pop up a notification...
        return True

    def main(self):
        gtk.main()

if __name__ == "__main__":
    (options, arguments) = getopt.getopt(sys.argv[1:], "D:hl:V?",
                                         ['speedunits=','altunits=','verbose'])
    debug = 0
    latlon = 'd'
    speedunits = 'mph'
    altunits = 'feet'
    for (opt, val) in options:
        if opt in '-D':
            debug = int(val)
        elif opt == '-l':
            latlon = val
        elif opt == '--speedunits':
            speedunits = val
        elif opt == '--altunits':
            altunits = val
        elif opt in ('-?', '-h', '--help'):
            print __doc__
            sys.exit(0)
        elif opt == 'V':
            sys.stderr.write("xgps 0.1\n")
	    sys.exit(0)

    # FIXME: Currently no args other than verbose are honored.
    base = Base()
    daemon = gps.gps(mode=gps.WATCH_ENABLE|gps.WATCH_JSON,verbose=debug>0)
    base.watch(daemon)
    base.main()
