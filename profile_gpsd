#!/usr/bin/env python
#
# Collect latency-profiling data from a running gpsd.
# By default, turn it into a GNUPLOT graph.
import sys, time, getopt, gps

def gnuplot(await):
    sys.stdout.write("set autoscale\n")
    sys.stdout.write('set key below\n')
    sys.stdout.write('set style fill\n')
    sys.stdout.write('set key title "%s"\n' % time.asctime())
    sys.stdout.write('plot "-" using 0:2 title "Line latency", using 0:3 title "Decode time", using 0:4 title "TCP/IP latency"\n')
    sys.stdout.write("#\n")

    print "#GPS time        	Received	Transmitted 	Read"
    print "#----------------	---------	----------- 	----------"
    while await:
        session.poll()
        gps_time = gps.isotime(session.utc)
        recv_time = session.recv_time
        emit_time = session.emit_time
        # Throw out latencies above 1 second, these are
        # serial-buffering artifacts at the start of the session
        if (recv_time - gps_time) % 3600 > 1:
            continue
        print "%.6f	%2.6f	%2.6f	%2.6f	# %s" \
              % (gps_time,
                 (recv_time - gps_time) % 3600,
                 (emit_time - gps_time) % 3600,
                 (time.time() - gps_time) % 3600,
                 session.tag)
        await -= 1
    sys.stdout.write("end\n")

if __name__ == '__main__':
    (options, arguments) = getopt.getopt(sys.argv[1:], "hn:r")
    await = 100;
    raw =False
    for (switch, val) in options:
	if (switch == '-n'):
	    await = int(val)
	elif (switch == '-r'):
	    raw = True
        elif (switch == '-h'):
            sys.stderr.write("usage: profile_gpsd [-h] [-r] [-n samplecount] \n")
    session = gps.gps(host="localhost", port="2947")
    try:
        session.query("wZ+")
        if raw:
            while True:
                session.poll()
                gps_time = gps.isotime(session.utc)
                recv_time = session.recv_time
                emit_time = session.emit_time
                # Throw out latencies above 1 second, these are
                # serial-buffering artifacts at the start of the session
                if (recv_time - gps_time) % 3600 > 1:
                    continue
                print "%.6f	%2.6f	%2.6f	%2.6f	# %s" \
                      % (gps_time,
                         (recv_time - gps_time) % 3600,
                         (emit_time - gps_time) % 3600,
                         (time.time() - gps_time) % 3600,
                         session.tag)
        else:
            gnuplot(await)
    finally:
        session.query("Z-")
        del session

