#!/usr/bin/env python
#
# Collect latency-profiling data from a running gpsd.
import sys, time, getopt, gps

def rawplot(baud=None, gps_time=None, recv_time=None,emit_time=None, tag=None):
    if not baud:
        print "#GPS time        	Received	Transmitted 	Read"
        print "#----------------	---------	----------- 	----------"
    else:
            print "%.6f	%2.6f	%2.6f	%2.6f	# %s" \
                  % (gps_time,
                     (recv_time - gps_time) % 3600,
                     (emit_time - gps_time) % 3600,
                     (time.time() - gps_time) % 3600,
                     tag)

if __name__ == '__main__':
    (options, arguments) = getopt.getopt(sys.argv[1:], "hn:r")
    await = 100;
    raw =False
    for (switch, val) in options:
	if (switch == '-n'):
	    await = int(val)
	elif (switch == '-r'):
	    raw = True
        elif (switch == '-h'):
            sys.stderr.write("usage: profile_gpsd [-h] [-r] [-n samplecount] \n")
    session = gps.gps(host="localhost", port="2947")
    try:
        session.query("wZ+")
        rawplot()
        while True:
            session.poll()
            gps_time = gps.isotime(session.utc)
            recv_time = session.recv_time
            emit_time = session.emit_time
            # Throw out latencies above 1 second, these are
            # serial-buffering artifacts at the start of the session
            if (recv_time - gps_time) % 3600 > 1:
                continue
            rawplot(session.baudrate, gps_time, recv_time, emit_time, session.tag)
    finally:
        session.query("wZ-")
        del session

