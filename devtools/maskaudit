#!/usr/bin/env python
#
# With -t, report on which status masks are used in the daemon vs. the
# client-side library.
#
# With -p, dump a Python status mask list translated from the C one.

import sys, commands, glob, getopt

class SourceExtractor:
    def __init__(self):
        self.daemonfiles = ["gpsd.c", "libgpsd_core.c", "pseudonmea.c"] + glob.glob("driver_*.c")
        self.masks = []
        for line in file("gps.h"):
            if line.startswith("#define") and "_SET" in line:
                fields = line.split()
                self.masks.append((fields[1], fields[2]))
    
    def in_library(self, flag):
        (status, output) = commands.getstatusoutput("grep %s libgps.c libgps_json.c" % flag)
        return status == 0

    def in_daemon(self, flag):
        (status, output) = commands.getstatusoutput("grep %s %s" % (flag, " ".join(self.daemonfiles)))
        return status == 0

if __name__ == '__main__':
    try:
        (options, arguments) = getopt.getopt(sys.argv[1:], "pt")
        tabulate = False
        pythonize = False
        for (switch, val) in options:
            if (switch == '-t'):
                tabulate = True
            if (switch == '-p'):
                pythonize = True

        source = SourceExtractor()
        print source.daemonfiles

        if tabulate:
            print "%-14s	%8s %8s" % (" ", "Library", "Daemon")
            for (flag, value) in source.masks:
                print "%-14s	%8s %8s" % (flag, source.in_library(flag), source.in_daemon(flag))
        if pythonize:
            for (d, v) in source.masks:
                print "%-15s\t= %s" % (d, v[:-1])
    except KeyboardInterrupt:
        pass



