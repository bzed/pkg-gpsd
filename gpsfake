#!/usr/bin/env python
#
# gpsfake -- test harness for gpsd
#
# Simulates a GPS, playing back a logfile
# Most of the logic for this now lives in gosfake.py,
# factored out so we can write other test programs with it.

import sys, os, signal, time, getopt
import gpsfake

class Baton:
    "Ship progress indications to stderr."
    def __init__(self, prompt, endmsg=None):
        self.stream = sys.stderr
        self.stream.write(prompt + "... \010")
        self.stream.flush()
        self.count = 0
        self.endmsg = endmsg
        self.time = time.time()
        return

    def twirl(self, ch=None):
        if self.stream is None:
            return
        if ch:
            self.stream.write(ch)
        else:
            self.stream.write("-/|\\"[self.count % 4])
            self.stream.write("\010")
        self.count = self.count + 1
        self.stream.flush()
        return

    def end(self, msg=None):
        if msg == None:
            msg = self.endmsg
        if self.stream:
            self.stream.write("...(%2.2f sec) %s.\n" % (time.time() - self.time, msg))
        return

(options, arguments) = getopt.getopt(sys.argv[1:], "c:D:ghlm:o:ps:v")
cycle = 1
monitor = ""
speed = 4800
linedump = False
pipe = False
verbose = False
doptions = ""
for (switch, val) in options:
    if (switch == '-c'):
        cycle = float(val)
    elif (switch == '-D'):
        doptions += " -D " + val
    elif (switch == '-g'):
        monitor = "gdb --args "
    elif (switch == '-l'):
        linedump = True
    elif (switch == '-m'):
        monitor = val + " "
    elif (switch == '-o'):
        doptions = val
    elif (switch == '-p'):
        pipe = True
        cycle = 0.05
    elif (switch == '-s'):
        speed = int(val)
    elif (switch == '-v'):
        verbose = True
    elif (switch == '-h'):
        sys.stderr.write("usage: gpsfake [-h] [-l] [-m monitor] [--D debug] [-o options] [-p] [-s speed] [-c cycle] logfile\n")
        raise SystemExit,0
logfile = arguments[0]

# First step: grab packets from the specified input source
# and turn them into an internal sentence list.  Croak if this fails.
try:
    fakegps = gpsfake.FakeGPS(logfile, speed)
except gpsfake.PacketError, e:
    sys.stderr.write("gsfake: " + e.msg + "\n")
    raise SystemExit, 1
except IOError:
    sys.stderr.write("gsfake: no such file as %s or file unreadable\n"%logfile)
    raise SystemExit, 1
except OSError:
    sys.stderr.write("gpsfake: can't open pty.\n")
    raise SystemExit, 1
if verbose:
    sys.stderr.write("gpsfake: interpreting as %s packets\n" % testload.packtype)

daemon = gpsfake.DaemonInstance()

# Next step: Launch the daemon and the thread to monitor it
child = os.fork()
if child:
    # Parent side
    try:
        daemon.spawn(doptions, prefix=monitor, background=False)
    except OSError:
        sys.stderr.write("gpsfake: '%s' failed.\n" % daemon.spawncmd)
        os.kill(child, signal.SIGTERM)
        raise SystemExit,1
    os.kill(child, signal.SIGTERM)
    raise SystemExit,0
else:
    # Child side -- wait for daemon to make pidfile so we know it's running
    daemon.wait_pid()
    if not pipe or verbose:
        sys.stderr.write("gpsfake: daemon launch OK.\n")
    try:
        daemon.add_device(fakegps.slave)
        if pipe:
            baton = Baton("Processing %s" % fakegps.testload.logfile, "done")
            if not fakegps.enable_capture():
                sys.stderr.write("gpsfake: gpsd unreachable.\n")
                raise SystemExit, 1
        try:
            def fakehook(linenumber, fakegps):
                if linenumber % len(fakegps.testload.sentences) == 0:
                    if pipe and linenumber > 0:
                        return False
                    if not pipe:
                        sys.stderr.write("gpsfake: log cycle begins.\n")
                time.sleep(cycle)
                if linedump:
                    if fakegps.testload.textual:
                        ml = fakegps.testload.sentences[linenumber % len(fakegps.testload.sentences)].strip()
                    else:
                        ml = ""
                    print fakegps.testload.legend % (linenumber % len(fakegps.testload.sentences) + 1) + ml
                if pipe:
                    baton.twirl()
                return True
            fakegps.start(fakehook)
        except KeyboardInterrupt:
            pass
        if not daemon.is_alive():
            print "gpsfake: gpsd is gone."
        if pipe:
            baton.end()
            sys.stdout.write("".join(fakegps.responses))
    finally:
        del daemon
    raise SystemExit,0
