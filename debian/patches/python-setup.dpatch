#! /bin/sh /usr/share/dpatch/dpatch-run
## python-setup.dpatch by Bernd Zeimetz <bernd@bzed.de>
##
## DP: creating a proper setup.py to be able to install the python
## DP: files properly

@DPATCH@
diff -urNad gpsd~/setup.py gpsd/setup.py
--- gpsd~/setup.py	2006-12-15 00:43:39.000000000 +0100
+++ gpsd/setup.py	2007-10-14 00:26:36.000000000 +0200
@@ -1,8 +1,44 @@
 # $Id: setup.py 4076 2006-12-05 02:00:19Z esr $
 # Creates build/lib.linux-${arch}-${pyvers}/gpspacket.so,
 # where ${arch} is an architecture and ${pyvers} is a Python version.
+
 from distutils.core import setup, Extension
-setup(name="gpspacket", version="1.0",
-      ext_modules=[Extension("gpspacket",
-                             ["gpspacket.c", "packet.c",
-                              "isgps.c", "rtcm.c", "strl.c", "hex.c"])])
+from distutils.command.build_ext import build_ext as _build_ext
+
+import os
+import sys
+
+class build_ext(_build_ext):
+
+    def run(self):
+
+        if not os.path.exists('gpsd_config.h'):
+            sys.stderr.write('\nPlease run configure first!\n')
+            sys.exit(1)
+
+        p_names = 'packet_names.h'
+        p_names_created = False
+        if not os.path.exists(p_names):
+            make_in, make_out = os.popen2('make %s' % p_names)
+            print make_out.read()
+            make_out.close()
+            make_in.close()
+
+        _build_ext.run(self)
+
+        if p_names_created:
+            os.remove(p_names)
+
+
+extension_source = ["gpspacket.c", "packet.c", "isgps.c",
+                    "rtcm.c", "strl.c", "hex.c"]
+
+setup( cmdclass={'build_ext': build_ext},
+       name="gpspacket",
+       version="1.0",
+       ext_modules=[Extension("gpspacket", extension_source)],
+       py_modules = ['gpsfake','gps'],
+       data_files=[('bin', ['gpsfake','gpsprof']),
+                   ('share/man/man1', ['gpsfake.1','gpsprof.1'])]
+     )
+
