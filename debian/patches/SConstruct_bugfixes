--- a/SConstruct
+++ b/SConstruct
@@ -16,15 +16,16 @@
 # without changing the --prefix prefix.
 
 # Unfinished items:
-# * Qt binding (needs to build .pc, .prl files)
-# * Allow building for multiple python versions)
 # * Out-of-directory builds: see http://www.scons.org/wiki/UsingBuildDir
 
 # Release identification begins here
 gpsd_version = "3.3"
-libgps_major = 20
-libgps_minor = 0
-libgps_age   = 0
+
+# library version
+libgps_version_current  = 20
+libgps_version_revision = 0
+libgps_version_age      = 0
+
 # Release identification ends here
 
 # Hosting information (mainly used for templating web pages) begins here
@@ -49,13 +50,27 @@ formserver = "www@mainframe.cx"
 devmail    = "gpsd-dev@lists.nongnu.org"
 # Hosting information ends here
 
+EnsureSConsVersion(2,0,1)
+
+import copy, os, sys, glob, re, platform, time
 EnsureSConsVersion(1,2,0)
 
-import copy, os, sys, commands, glob, re, platform, time
+import copy, os, sys, glob, re, platform
 from distutils import sysconfig
 from distutils.util import get_platform
 import SCons
 
+# replacement for functions from the commands module, which is deprecated.
+from subprocess import PIPE, STDOUT, Popen
+def _getstatusoutput(cmd, input=None, cwd=None, env=None):
+    pipe = Popen(cmd, shell=True, cwd=cwd, env=env, stdout=PIPE, stderr=STDOUT)
+    (output, errout) = pipe.communicate(input=input)
+    status = pipe.returncode
+    return (status, output)
+def _getoutput(cmd, input=None, cwd=None, env=None):
+    return _getstatusoutput(cmd, input, cwd, env)[1]
+
+
 #
 # Build-control options
 #
@@ -222,15 +237,8 @@ for flags in ["LDFLAGS", "LINKFLAGS", "S
 env['SRCDIR'] = '.'
 
 def announce(msg):
-    # When we find out how to access the --quiet flag, we use that here
-    print msg
-
-# define a helper function for pkg-config - we need to pass
-# --static for static linking, too.
-if env["shared"]:
-    pkg_config = lambda pkg: ['!pkg-config --cflags --libs %s' %(pkg, )]
-else:
-    pkg_config = lambda pkg: ['!pkg-config --cflags --libs --static %s' %(pkg, )]
+    if not env.GetOption("silent"):
+        print msg
 
 # GCC isn't always named gcc, alas.
 if env['CC'] == 'gcc' or (sys.platform.startswith('freebsd') and env['CC'] == 'cc'):
@@ -383,8 +391,8 @@ if config.CheckExecutable('$CHRPATH -v',
     env.Prepend(LIBPATH=[os.path.realpath(os.curdir)])
     env.Prepend(RPATH=[os.path.realpath(os.curdir)])
 else:
-    print "The chrpath utility is required for GPSD to build."
-    quit()
+    print "chrpath is not available, forcing static linking."
+    env["shared"] = False
 
 confdefs = ["/* gpsd_config.h.  Generated by scons, do not hand-hack.  */\n"]
 
@@ -394,6 +402,13 @@ confdefs.append('#define GPSD_URL "%s"\n
 
 cxx = config.CheckCXX()
 
+# define a helper function for pkg-config - we need to pass
+# --static for static linking, too.
+if env["shared"]:
+    pkg_config = lambda pkg: ['!pkg-config --cflags --libs %s' %(pkg, )]
+else:
+    pkg_config = lambda pkg: ['!pkg-config --cflags --libs --static %s' %(pkg, )]
+
 # The actual distinction here is whether the platform has ncurses in the
 # base system or not. If it does, pkg-config is not likely to tell us
 # anything useful. FreeBSD does, Linux doesn't. Most likely other BSDs
@@ -579,6 +594,9 @@ else:
 
 ## Two shared libraries provide most of the code for the C programs
 
+libgps_version_soname = libgps_version_current - libgps_version_age
+libgps_version = "%d.%d.%d" %(libgps_version_soname, libgps_version_age, libgps_version_revision)
+
 libgps_sources = [
     "ais_json.c",
     "daemon.c",
@@ -641,7 +659,7 @@ libgpsd_sources = [
 # Inspired by Richard Levitte's (slightly buggy) code at
 # http://markmail.org/message/spttz3o4xrsftofr
 
-def VersionedSharedLibrary(env, libname, libversion, lib_objs=[], parse_flags=[]):
+def VersionedSharedLibrary(env, libname, libgps_version, lib_objs=[], parse_flags=[]):
     platform = env.subst('$PLATFORM')
     shlib_pre_action = None
     shlib_suffix = env.subst('$SHLIBSUFFIX')
@@ -649,8 +667,8 @@ def VersionedSharedLibrary(env, libname,
     shlink_flags = SCons.Util.CLVar(env.subst('$SHLINKFLAGS'))
 
     if platform == 'posix':
-        ilib_suffix = shlib_suffix + '.' + libversion
-        (major, age, revision) = libversion.split(".")
+        ilib_suffix = shlib_suffix + '.' + libgps_version
+        (major, age, revision) = libgps_version.split(".")
         soname = "lib" + libname + shlib_suffix + "." + major
         shlink_flags += [ '-Wl,-Bsymbolic', '-Wl,-soname=%s' % soname ]
     elif platform == 'cygwin':
@@ -658,9 +676,9 @@ def VersionedSharedLibrary(env, libname,
         shlink_flags += [ '-Wl,-Bsymbolic',
                           '-Wl,--out-implib,${TARGET.base}.a' ]
     elif platform == 'darwin':
-        ilib_suffix = '.' + libversion + shlib_suffix
-        shlink_flags += [ '-current_version', '%s' % libversion,
-                          '-compatibility_version', '%s' % libversion,
+        ilib_suffix = '.' + libgps_version + shlib_suffix
+        shlink_flags += [ '-current_version', '%s' % libgps_version,
+                          '-compatibility_version', '%s' % libgps_version,
                           '-undefined', 'dynamic_lookup' ]
 
     ilib = env.SharedLibrary(libname,lib_objs,
@@ -668,20 +686,20 @@ def VersionedSharedLibrary(env, libname,
                             SHLINKFLAGS=shlink_flags, parse_flags=parse_flags)
 
     if platform == 'darwin':
-        if libversion.count(".") != 2:
+        if libgps_version.count(".") != 2:
             # We need a library name in libfoo.x.y.z.dylib form to proceed
             raise ValueError
-        lib = 'lib' + libname + '.' + libversion + '.dylib'
+        lib = 'lib' + libname + '.' + libgps_version + '.dylib'
         lib_no_ver = 'lib' + libname + '.dylib'
         # Link libfoo.x.y.z.dylib to libfoo.dylib
         env.AddPostAction(ilib, 'rm -f %s; ln -s %s %s' % (
             lib_no_ver, lib, lib_no_ver))
         env.Clean(lib, lib_no_ver)
     elif platform == 'posix':
-        if libversion.count(".") != 2:
+        if libgps_version.count(".") != 2:
             # We need a library name in libfoo.so.x.y.z form to proceed
             raise ValueError
-        lib = "lib" + libname + ".so." + libversion
+        lib = "lib" + libname + ".so." + libgps_version
         suffix_re = '%s\\.[0-9\\.]*$' % re.escape(shlib_suffix)
         # For libfoo.so.x.y.z, links libfoo.so libfoo.so.x.y libfoo.so.x
         major_name = shlib_suffix + "." + lib.split(".")[2]
@@ -721,7 +739,7 @@ else:
     def Library(env, target, sources, version, parse_flags=[]):
         return VersionedSharedLibrary(env=env,
                                      libname=target,
-                                     libversion=version,
+                                     libgps_version=version,
                                      lib_objs=sources,
                                      parse_flags=parse_flags)
     LibraryInstall = lambda env, libdir, sources: \
@@ -729,20 +747,17 @@ else:
 
 # Klugery to handle sonames ends
 
-# Must be MAJOR.AGE.REVISION
-libversion = "%d.%d.%d" % (libgps_major, libgps_minor, libgps_age)
-
 compiled_gpslib = Library(env=env,
                           target="gps",
                           sources=libgps_sources,
-                          version=libversion,
+                          version=libgps_version,
                           parse_flags= ["-lm"] + dbus_libs)
 env.Clean(compiled_gpslib, "gps_maskdump.c")
 
 compiled_gpsdlib = Library(env=env,
                            target="gpsd",
                            sources=libgpsd_sources,
-                           version=libversion,
+                           version=libgps_version,
                            parse_flags=usblibs + rtlibs + bluezlibs)
 
 libraries = [compiled_gpslib, compiled_gpsdlib]
@@ -768,7 +783,7 @@ if qt_env:
                                              CC=compile_with,
                                              CFLAGS=compile_flags,
                                              parse_flags=dbus_libs))
-    compiled_qgpsmmlib = Library(qt_env, "Qgpsmm", qtobjects, libversion)
+    compiled_qgpsmmlib = Library(qt_env, "Qgpsmm", qtobjects, libgps_version)
     libraries.append(compiled_qgpsmmlib)
 
 # The libraries have dependencies on system libraries
@@ -913,7 +928,13 @@ else:
     for ext, sources in python_extensions.iteritems():
         python_objects[ext] = []
         for src in sources:
-            python_objects[ext].append(python_env.SharedObject(src.split(".")[0] + '-py', src))
+            python_objects[ext].append(
+                python_env.NoCache(
+                    python_env.SharedObject(
+                        src.split(".")[0] + '-py_' + '_'.join(['%s' %(x,) for x in sys.version_info]), src
+                    )
+                )
+            )
         python_compiled_libs[ext] = python_env.SharedLibrary(ext, python_objects[ext])
     python_built_extensions = python_compiled_libs.values()
 
@@ -957,12 +978,15 @@ env.Command(target="ais_json.i", source=
     chmod a-w $TARGET''')
 
 # generate revision.h
-(st, rev) = commands.getstatusoutput('git describe')
-if st != 0:
-    from datetime import datetime
-    rev = datetime.now().isoformat()[:-4]
+if 'dev' in gpsd_version:
+    (st, rev) = _getstatusoutput('git describe')
+    if st != 0:
+        from datetime import datetime
+        rev = datetime.now().isoformat()[:-4]
+else:
+    rev = gpsd_version
 revision='#define REVISION "%s"\n' %(rev.strip(),)
-env.NoClean(env.Textfile(target="revision.h", source=[revision]))
+env.Textfile(target="revision.h", source=[revision])
 
 # generate pps_pin.h
 pps_pin = env['pps_pin']
@@ -1014,6 +1038,7 @@ def substituter(target, source, env):
         ('@WEBFORM@',    webform),
         ('@FORMSERVER@', formserver),
         ('@DEVMAIL@',    devmail),
+        ('@LIBGPSVERSION@', libgps_version),
         )
     with open(str(source[0])) as sfp:
         content = sfp.read()
@@ -1130,6 +1155,10 @@ else:
                         python_egg_info_install]
 
 pc_install = [ env.Install(installdir('pkgconfig'), x) for x in ("libgps.pc", "libgpsd.pc") ]
+if qt_env:
+    pc_install.append(qt_env.Install(installdir('pkgconfig'), 'Qgpsmm.pc'))
+    pc_install.append(qt_env.Install(installdir('libdir'), 'libQgpsmm.prl'))
+
 
 maninstall = []
 if manbuilder:
@@ -1494,7 +1523,7 @@ Utility('udev-test', '', [
 # for these productions to work.
 
 if os.path.exists("gpsd.c") and os.path.exists(".gitignore"):
-    distfiles = commands.getoutput(r"git ls-files | grep -v '^www/'").split()
+    distfiles = _getoutput(r"git ls-files | grep -v '^www/'").split()
     if ".gitignore" in distfiles:
         distfiles.remove(".gitignore")
     distfiles += generated_sources
@@ -1540,6 +1569,7 @@ if os.path.exists("gpsd.c") and os.path.
     tag_release = Utility('tag-release', [], [
         'git tag -s -m "Tagged for external release ${VERSION}" release-${VERSION}'
         ])
+    upload_tags = Utility('upload-tags', [], ['git push --tags'])
 
     # Local release preparation. This production will require Internet access,
     # but it doesn't do any uploads or public repo mods.
@@ -1558,7 +1588,7 @@ if os.path.exists("gpsd.c") and os.path.
     # All a buildup to this.
     env.Alias("release", [releaseprep,
                           upload_release,
-                          'git push --tags',
+                          upload_tags,
                           upload_web])
 
 # The following sets edit modes for GNU EMACS
