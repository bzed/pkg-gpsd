Update SConstruct form gpsd git head
This is required to support building with python3.
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=883286
--- a/SConstruct
+++ b/SConstruct
@@ -14,7 +14,7 @@
 # release    - ship a release
 #
 # --clean    - clean all normal build targets
-# sconsclean - clean up scons dotfiles (but not the database)
+# sconsclean - clean up scons dotfiles (but not the database: .sconsign.dblite)
 #
 # Setting the DESTDIR environment variable will prefix the install destinations
 # without changing the --prefix prefix.
@@ -23,9 +23,16 @@
 # * Out-of-directory builds: see http://www.scons.org/wiki/UsingBuildDir
 # * Coveraging mode: gcc "-coverage" flag requires a hack
 #   for building the python bindings
+# * Python 3 compatibility in this recipe
+
+# Since SCons 3.0.0 forces print_function on us, it needs to be unconditional.
+# This is recognized to be a bug in SCons, but we need to live with it for now,
+# and we'll need this for eventual Python 3 compatibility, anyway.
+# Python requires this to precede any non-comment code.
+from __future__ import print_function
 
 # Release identification begins here
-gpsd_version = "3.17"
+gpsd_version = "3.18~dev"
 
 # client library version
 libgps_version_current = 23
@@ -78,6 +85,7 @@ import sys
 import time
 from distutils import sysconfig
 from distutils.util import get_platform
+from functools import reduce
 import SCons
 
 PYTHON_SYSCONFIG_IMPORT = 'from distutils import sysconfig'
@@ -111,6 +119,10 @@ def filtered_spawn(sh, escape, cmd, args
 # Build-control options
 #
 
+# without this, scons will not rebuild an existing target when the
+# source changes.
+Decider('timestamp-match')
+
 # Start by reading configuration variables from the cache
 opts = Variables('.scons-option-cache')
 
@@ -323,6 +335,11 @@ for driver in ('ashtech',
         env['nmea0183'] = True
         break
 
+
+# iSync uses ublox underneath, so we force to enable it
+if env['isync']:
+    env['ublox'] = True
+
 opts.Save('.scons-option-cache', env)
 env.SConsignFile(".sconsign.dblite")
 
@@ -354,7 +371,7 @@ for flag in ["LDFLAGS", "SHLINKFLAGS", "
 
 
 # Keep scan-build options in the environment
-for key, value in os.environ.iteritems():
+for key, value in os.environ.items():
     if key.startswith('CCC_'):
         env.Append(ENV={key: value})
 
@@ -375,7 +392,7 @@ if env.GetOption("silent"):
 
 def announce(msg):
     if not env.GetOption("silent"):
-        print msg
+        print(msg)
 
 # DESTDIR environment variable means user prefix the installation root.
 DESTDIR = os.environ.get('DESTDIR', '')
@@ -460,6 +477,8 @@ if env['sysroot']:
     env.MergeFlags({"LINKFLAGS": ["--sysroot=%s" % env['sysroot']]})
 
 # Build help
+def cmp(a, b):
+    return (a > b) - (a < b)
 
 Help("""Arguments may be a mixture of switches and targets in any order.
 Switches apply to the entire build regardless of where they are in the order.
@@ -843,9 +862,9 @@ else:
         "dbus_export": ["libdbus-1"],
     }
 
-    keys = map(lambda x: (x[0], x[2]), boolopts)  \
-        + map(lambda x: (x[0], x[2]), nonboolopts) \
-        + map(lambda x: (x[0], x[2]), pathopts)
+    keys = list(map(lambda x: (x[0], x[2]), boolopts))  \
+        + list(map(lambda x: (x[0], x[2]), nonboolopts)) \
+        + list(map(lambda x: (x[0], x[2]), pathopts))
     keys.sort()
     for (key, help) in keys:
         value = env[key]
@@ -982,7 +1001,7 @@ else:
 if env['python']:  # May have been turned off by error
     env['PYTHON'] = target_python_path
     env['ENV']['PYTHON'] = target_python_path  # For regress-driver
-    py_config_vars = ast.literal_eval(py_config_text)
+    py_config_vars = ast.literal_eval(py_config_text.decode())
     py_config_vars = [[] if x is None else x for x in py_config_vars]
     python_config = dict(zip(PYTHON_CONFIG_NAMES, py_config_vars))
 
@@ -1371,7 +1390,7 @@ else:
 
     python_objects = {}
     python_compiled_libs = {}
-    for ext, sources in python_extensions.iteritems():
+    for ext, sources in python_extensions.items():
         python_objects[ext] = []
         for src in sources:
             python_objects[ext].append(
@@ -1401,7 +1420,7 @@ Platform: UNKNOWN
     python_egg_info = python_env.Textfile(target="gps-%s.egg-info"
                                           % (gpsd_version, ),
                                           source=python_egg_info_source)
-    python_built_extensions = python_compiled_libs.values()
+    python_built_extensions = list(python_compiled_libs.values())
     python_targets = python_built_extensions + [python_egg_info]
 
 env.Command(target="packet_names.h", source="packet_states.h", action="""
@@ -1546,8 +1565,8 @@ def substituter(target, source, env):
         content = content.replace(s, t)
     m = re.search("@[A-Z]+@", content)
     if m and m.group(0) not in map(lambda x: x[0], substmap):
-        print >>sys.stderr, "Unknown subst token %s in %s." \
-            % (m.group(0), sfp.name)
+        print("Unknown subst token %s in %s." % (m.group(0), sfp.name),
+              file=sys.stderr)
     tfp = open(str(target[0]), "w")
     tfp.write(content)
     tfp.close()
@@ -1585,9 +1604,13 @@ base_manpages = {
     "gps2udp.1": "gps2udp.xml",
     "gpsdecode.1": "gpsdecode.xml",
     "srec.5": "srec.xml",
-    "ntpshmmon.1": "ntpshmmon.xml",
 }
 
+if env['pps'] and (env["timeservice"] or env["gpsdclients"]):
+    base_manpages.update({
+        "ntpshmmon.1": "ntpshmmon.xml",
+    })
+
 if tiocmiwait:
     base_manpages.update({
         "ppscheck.8": "ppscheck.xml",
@@ -1604,14 +1627,14 @@ if env['xgps']:
         "xgpsspeed.1": "gps.xml",
         "xgps.1": "gps.xml",
     })
-all_manpages = base_manpages.keys() + python_manpages.keys()
+all_manpages = list(base_manpages.keys()) + list(python_manpages.keys())
 
 man_env = env.Clone()
 if man_env.GetOption('silent'):
     man_env['SPAWN'] = filtered_spawn  # Suppress stderr chatter
 manpage_targets = []
 if manbuilder:
-    for (man, xml) in base_manpages.items() + python_manpages.items():
+    for (man, xml) in list(base_manpages.items()) + list(python_manpages.items()):
         manpage_targets.append(man_env.Man(source=xml, target=man))
 
 # Where it all comes together
@@ -1662,7 +1685,7 @@ if ((not env['debug'] and not env['profi
 if not env['python']:
     python_install = []
 else:
-    python_module_dir = python_libdir + os.sep + 'gps'
+    python_module_dir = str(python_libdir) + os.sep + 'gps'
     python_extensions_install = python_env.Install(DESTDIR + python_module_dir,
                                                    python_built_extensions)
     if ((not env['debug'] and not env['profiling']
@@ -1675,7 +1698,7 @@ else:
     python_progs_install = python_env.Install(installdir('bindir'),
                                               python_progs)
 
-    python_egg_info_install = python_env.Install(DESTDIR + python_libdir,
+    python_egg_info_install = python_env.Install(DESTDIR + str(python_libdir),
                                                  python_egg_info)
     python_install = [python_extensions_install,
                       python_modules_install,
@@ -1692,7 +1715,7 @@ if qt_env:
 
 
 maninstall = []
-for manpage in base_manpages.keys() + python_manpages.keys():
+for manpage in list(base_manpages.keys()) + list(python_manpages.keys()):
     if not manbuilder and not os.path.exists(manpage):
         continue
     section = manpage.split(".")[1]
@@ -1762,8 +1785,9 @@ if len(python_progs) > 0:
     # Theres's an internal error in astroid that requires we disable some
     # auditing. This is irritating as hell but there's no help for it short
     # of an upstream fix.
-    checkable.remove("xgps")
-    checkable.remove("xgpsspeed")
+    if env['xgps']:
+        checkable.remove("xgps")
+        checkable.remove("xgpsspeed")
     pylint = Utility(
         "pylint", ["jsongen.py", "maskaudit.py", python_built_extensions],
         ['''pylint --rcfile=/dev/null --dummy-variables-rgx='^_' '''
@@ -2177,7 +2201,7 @@ htmlpages = Split('''
     www/writing-a-driver.html
     ''')
 
-webpages = htmlpages + asciidocs + map(lambda f: f[:-3], glob.glob("www/*.in"))
+webpages = htmlpages + asciidocs + list(map(lambda f: f[:-3], glob.glob("www/*.in")))
 
 www = env.Alias('www', webpages)
 
@@ -2190,7 +2214,7 @@ def validation_list(target, source, env)
         if '-head' not in page:
             fp = open(page)
             if "Valid HTML" in fp.read():
-                print os.path.join(website, os.path.basename(page))
+                print(os.path.join(website, os.path.basename(page)))
             fp.close()
 Utility("validation-list", [www], validation_list)
 
@@ -2321,6 +2345,8 @@ env.Clean(clean_misc,
 env.Clean(clean_misc, glob.glob('*.gcno') + glob.glob('*.gcda'))
 # Clean Python coverage files
 env.Clean(clean_misc, glob.glob('.coverage*') + ['htmlcov/'])
+# Clean Qt stuff
+env.Clean(clean_misc, ['libQgpsmm.prl', 'Qgpsmm.pc'])
 # Other misc items
 env.Clean(clean_misc, ['config.log', 'contrib/ppscheck', 'TAGS'])
 
@@ -2353,7 +2379,7 @@ if os.path.exists("gpsd.c") and os.path.
     if ".gitignore" in distfiles:
         distfiles.remove(".gitignore")
     distfiles += generated_sources
-    distfiles += base_manpages.keys() + python_manpages.keys()
+    distfiles += list(base_manpages.keys()) + list(python_manpages.keys())
     if "packaging/rpm/gpsd.spec" not in distfiles:
         distfiles.append("packaging/rpm/gpsd.spec")
 
