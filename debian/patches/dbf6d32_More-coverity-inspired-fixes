From dbf6d322945e68fce36afd6dba75ab56d60b0c86 Mon Sep 17 00:00:00 2001
From: "Eric S. Raymond" <esr@thyrsus.com>
Date: Wed, 9 May 2012 20:39:08 -0400
Subject: [PATCH] More coverity-inspired fixes.

All regression tests pass ans soint runs clean.
---
 driver_geostar.c |    2 +-
 driver_tsip.c    |    2 +-
 driver_ubx.c     |    7 +++----
 gpsd.h-tail      |    2 +-
 gpsd_json.c      |    2 +-
 net_ntrip.c      |    2 +-
 6 files changed, 8 insertions(+), 9 deletions(-)

--- a/driver_geostar.c
+++ b/driver_geostar.c
@@ -466,7 +466,7 @@ static void geostar_event_hook(struct gp
 	return;
 
     /*@-shiftimplementation +ignoresigns@*/
-    if (event == event_identified && event == event_reactivate) {
+    if (event == event_identified || event == event_reactivate) {
 	/* Select binary packets */
 	putbe32(buf, 0, 0xffff0000);
 	putbe32(buf, 4, 0);
--- a/driver_tsip.c
+++ b/driver_tsip.c
@@ -959,7 +959,7 @@ static void tsip_event_hook(struct gps_d
     if (session->context->readonly)
 	return;
     /* FIX-ME: Resending this might not be needed on reactivation */
-    if (event == event_identified && event == event_reactivate) {
+    if (event == event_identified || event == event_reactivate) {
 	unsigned char buf[100];
 
 	/* I/O Options */
--- a/driver_ubx.c
+++ b/driver_ubx.c
@@ -512,7 +512,7 @@ static gps_mask_t parse_input(struct gps
 
 bool ubx_write(struct gps_device_t * session,
 	       unsigned int msg_class, unsigned int msg_id,
-	       unsigned char *msg, unsigned short data_len)
+	       unsigned char *msg, size_t data_len)
 {
     unsigned char CK_A, CK_B;
     ssize_t i, count;
@@ -566,8 +566,7 @@ static ssize_t ubx_control_send(struct g
 {
     return ubx_write(session, (unsigned int)msg[0], (unsigned int)msg[1],
 		     (unsigned char *)msg + 2,
-		     (unsigned short)(data_len - 2)) ? ((ssize_t) (data_len +
-								   7)) : -1;
+		     (size_t)(data_len - 2)) ? ((ssize_t) (data_len + 7)) : -1;
 }
 #endif /* CONTROLSEND_ENABLE */
 
@@ -676,7 +675,7 @@ static void ubx_nmea_mode(struct gps_dev
 	buf[14] |= 0x01;	/* turn on UBX output on this port */
     }
     /*@ -charint +usedef @*/
-    (void)ubx_write(session, 0x06u, 0x00, &buf[6], 20);	/* send back with all other settings intact */
+    (void)ubx_write(session, 0x06u, 0x00, buf, sizeof(buf));	/* send back with all other settings intact */
 }
 
 static bool ubx_speed(struct gps_device_t *session,
--- a/gpsd.h-tail
+++ b/gpsd.h-tail
@@ -777,7 +777,7 @@ extern /*@observer@*/const char *gpsd_ma
 
 /* exceptional driver methods */
 extern bool ubx_write(struct gps_device_t *, unsigned int, unsigned int,
-		      /*@null@*/unsigned char *, unsigned short);
+		      /*@null@*/unsigned char *, size_t);
 extern bool aivdm_decode(const char *, size_t,
 			 struct aivdm_context_t [],
 			 struct ais_t *, int);
--- a/gpsd_json.c
+++ b/gpsd_json.c
@@ -1507,7 +1507,7 @@ void json_aivdm_dump(const struct ais_t
 
 #define SHIPTYPE_DISPLAY(n) (((n) < (unsigned int)NITEMS(ship_type_legends)) ? ship_type_legends[n] : "INVALID SHIP TYPE")
 
-    static const char *station_type_legends[16] = {
+    static const char *station_type_legends[] = {
 	"All types of mobiles",
 	"Reserved for future use",
 	"All types of Class B mobile stations",
--- a/net_ntrip.c
+++ b/net_ntrip.c
@@ -439,7 +439,7 @@ int ntrip_open(struct gps_device_t *devi
     char *stream = NULL;
     char *url = NULL;
     int ret = -1;
-    char t[strlen(caster + 1)];
+    char t[strlen(caster) + 1];
     char *tmp = t;
 
     switch (device->ntrip.conn_state) {
